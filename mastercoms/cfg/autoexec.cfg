// ~~~~ Mastercoms's TF2 Config ~~~~
// Version: v3.4.0 | August 13 2017

// Launch Options:
// -console -novid -nojoy -noff -nohltv -high -nouserclip -softparticlesdefaultoff -reuse -usetcp -primarysound -snoforceformat -disable_d3d9_hacks
//
// -console : displays console on startup
// -novid : disables Valve startup logo
// -nojoy : stops Joystick system from starting up
// -noff : disables rumble system
// -nohltv : disables Source TV
// -high : runs TF2 with High priority, which runs tasks ASAP, but not before OS level tasks, more FPS and responsiveness
// -nouserclip : disables user clip planes and enables fast clipping, more FPS
// -softparticlesdefaultoff : disable depth blending for particles and sprites, more FPS
// -reuse :  allow network sockets to be reused when busy (sets SO_REUSEADDR), better network performance
// -usetcp : allow usage of TCP where it would be more optimal than UDP, better network performance
// -primarysound : Don't use a secondary sound buffer, small FPS boost/more reliable sound
// -snoforceformat : Skips force setting of sound buffer format, small FPS boost/more reliable sound
// -disable_d3d9_hacks : disables some Source engine workarounds for dx9, small FPS boost

// Extra Launch Options:
// -noforcemaccel -noforcemparms -noforcemspd : uses Windows mouse settings, doesn't work with raw input
// -limitvsconst : limits the hardware vertex shader constants to 256, small FPS boost depending on your GPU
// -nosteamcontroller : disable Steam controller system

// Niche Launch Options:
// -nosrgb : disables SRGB (limits variety of colors), brighter lighting, flatter colors, FPS boost
// -nops2b : uses pixel shaders 2.0 instead of 2.0b, results in thicker fog and FPS boost
// -nostartupsound : disable game music on main menu
// -nosound : disables sound, no performance boost unless your drivers are slow
// -mat_softwaretl : forces software vertex processing, might be good for potato GPUs, will decrease FPS otherwise
// -small : allow for resolutions smaller than 640x480
// -nogammaramp : override in-game gamma with your desktop's settings. If you have an .icc calibration profile for you monitor you'll want this.

// --- Network ---
// Client prediction suffers greatly if you have
// network updates more than once per frame, so please
// adjust these based on your frame rate. You want to be
// setting them to the average of your lowest framerates,
// up to a maximum of 66.

// Send to server at this many times per second
cl_cmdrate 66
// Get from server at this many times per second
cl_updaterate 66
// Reduce delay between entity interpolation to minimum
// Set to 2 for some room for aiming error
cl_interp_ratio 1
// adjust delay between interpolating entities, set to 0 to use interp ratio
cl_interp 0
// smooth out entities to their new position after a prediction error
// prediction errors are often large and making entities jump instantly
// to their correct location is disorienting and makes it harder for you.
// the server will still accept hits on an entity that is being smoothed,
// so there isn't much benefit to turning this off, unless you're on a potato
cl_smooth 1
// time over which to smooth entities
cl_smoothtime 0.15
// server times out players after 65 seconds
// so why not wait until the server kicks you out?
cl_timeout 65
// compress packets save bytes, at the cost of extra cpu usage.
// if you have a fast enough network, this is recommended.
net_compresspackets 0
// how many packets we can split per frame
net_splitrate 3
// scaled rate for how many packets we are sending
// each packet can be a max size of 1260 bytes
// we can send up to 132 packets per second
rate 167580
// packet level ping control
net_maxcleartime 0.5
net_maxpacketdrop 100
// allow for split packets at the higher rate
net_splitpacket_maxrate 167581
// max out file upload size for extra content
net_maxfilesize 64
// you can change this to 581304 to always thread packets
// very demanding of your computer, and the network system
// keep it at 1 if your computer can't handle it
net_queued_packet_thread 1
// -- Netgraph --
// netgraph display
// 0 = no graph, 1 = text only, 2 = graph, 3 = legend + choke/loss, 4 = server perf stats
//net_graph 0
// the horizontal position of the netgraph
// 0 = left, 1 = right, 2 = middle
// anything else will set the x coordinate of the graph's left edge
//net_graphpos 1
// height of the text part of the graph
//net_graphheight 64
// scale fonts as the screen resolution goes up
//net_graphproportionalfont 1
// the height of the graph portion
//net_scale 5
// draw height ticks as single ticks (small optimization)
// use 1 to revert back to the Half-Life 1 behavior of drawing a full rectangle
net_graphsolid 0
// draw text fields
//net_graphtext 1
// over how many milliseconds should the text area measure
//net_graphmsecs 400
// show the latency part of the graph
//net_graphshowlatency 1
// show the interpolation part of the graph
//net_graphshowinterp 1

// --- Render ---
// -- Threading
// These settings will boost your performance on a 4 core CPU
// loop through the leaf asynchronously
cl_threaded_client_leaf_system 1
// matsys queue in multithreaded mode
mat_queue_mode 2
// use a threaded game logic loop if multithreaded
host_thread_mode 1
// do some rendering on a separate thread. rarely buggy.
r_threaded_renderables 1
// queue decals to matsys
// disabled in this config by default because of crashes
// you may want to try to see if it works on your system
r_queued_decals 0
// usually doesn't render a texture for post processing effects, due to timing
// issues. better to disable it by default. it might work for your driver.
//r_queued_post_processing 1
// TEST: use stencil buffer for occlusion queries
mat_tonemapping_occlusion_use_stencil 1
// queue some rope rendering to matsys
r_queued_ropes 1
// -- Optimization --
// These settings don't affect quality that much and improve performance
// don't do memory flushes
host_flush_threshold 0
// don't store a useless frame time variable
r_norefresh 1
// skip calculating sky glow obstruction
// also disables bloom
building_cubemaps 1
// force using occluders
r_occludermincount 2
// autodetect is broken for fast z rejects, so make it available.
// if it's not supported, it just won't be used
// this setting is usually good to be enabled, but
// if you have a weak CPU and strong GPU, disable this by setting it to 0
// basically, what this does it renders the first pass of a
// scene with a z buffer on the CPU
// then this allows the GPU to quickly render the scene, as the visible parts
// of the scene have already been calculated
r_fastzreject 1
// renders textures dynamically
// but it's very buggy and flashes textures most of the time
//disp_dynamic 1
// use optimized fog rendering
fast_fogvolume 1
// use a pixel shader for fog if possible
r_pixelfog 1
// prevent a possible memory leak with fps_max 0 by setting it to a large value
// also, some systems in Source assume an FPS limit of 300
fps_max 300
// don't limit performance when the engine is not focused.
// the focus detection can be buggy on some systems and may
// throttle your game, without you knowing
engine_no_focus_sleep 0
// fade out fake LOD objects at the minimum possible distance
lod_TransitionDist -5000
// clips entity rendering according to a plane determined at each entity run
// improves render performance at the cost of CPU
r_entityclips 1
// clips what is drawn for a performance improvement
mat_clipz 1
// cull on world draw
r_frustumcullworld 1
// cache some world rendering
r_worldlistcache 1
// ensure that we're using the currently preferred rendering method
r_drawopaquestaticpropslast 1
// clamps the highest lod to the set lod for models
// 0 - high; 1 - medium; 2 - maximum performance
r_rootlod 1
r_lod -1
r_shader_srgb -1
// simplify shading
mat_reducefillrate 1
// if you have black textures, disable mipmapping textures
//mat_mipmaptextures 0
// don't do a SSAO depth pass for pyrovision
pyro_dof 0
// don't draw a vignette for pyrovision
pyro_vignette 0
// disable some pyrovision effects, very small performance gain
//pyro_min_intensity 0
//pyro_max_intensity 0
//pyro_min_rate 0
//pyro_max_rate 0
//pyro_min_side_length 0
//pyro_max_side_length 0
//pyro_min_side_width 0
//pyro_max_side_width 0
// combine post processing effects unless you have
// these effects disabled: software AA, bloom and color correction
mat_postprocessing_combine 0
// disable HDR and bloom
mat_hdr_level 0
// disable bloom
mat_disable_bloom 1
// ensure bloom is disabled
mat_bloomscale 0
mat_non_hdr_bloom_scalefactor 0
mat_bloom_scalefactor_scalar 0
// disable fancy blending
//mat_disable_fancy_blending 1
// disable lightwarps
//mat_disable_lightwarp 1
// disable phong shading
//mat_phong 0
// adjust texture quality
// (-1 to 4) -1 is highest quality, 4 is lowest
//mat_picmip 1
// disable color correction
mat_colorcorrection 0
// disable entity color correction
mat_colcorrection_disableentities 1
// filtering
// 0 - bilinear | 1 - trilinear
mat_trilinear 0
// adjust level of trilinear filtering (2, 4, 8, 16)
// higher numbers are more intensive
mat_forceaniso 0
// disable motion blur
mat_motion_blur_enabled 0
// forward motion blur
mat_motion_blur_forward_enabled 0
// disable 3D sky
r_3dsky 0
// up scale from a lower resolution (%, from 0.0016 to 1.0)
// for weak GPUs. recommended to start at 0.9 and work your way down to 0.4
// after that, you probably won't be able to clearly see anything
//mat_viewport 0.9
// this is to make sure upscaling based on mat_viewport works
//mat_viewportupscale 1

// -- Anti Aliasing --
// don't do software AA
mat_software_aa_strength 0
// don't do software AA on the HUD
mat_software_aa_strength_vgui 0

// -- View --
// see more of the battlefield. more to render. decrease for ABSOLUTE POTATOS
fov_desired 90
// draw your weapon model, increases performance if disabled
// also provides a vision advantage
r_drawviewmodel 1
// draw your character model instead of your viewmodel
// will decrease performance
//cl_first_person_uses_world_model 1
// fov for your viewmodel
//viewmodel_fov 70

// -- Lighting --
// ambient boost does a slightly noticeable effect that uses the CPU somewhat
r_ambientboost 0
// tweak lighting a bit to make characters stand out more
// if you want realistic darkness on characters, use 0.2
// default is 0.3
// no real performance impact, but lowering values may theoretically
// decrease performance by a tiny, tiny bit
r_ambientmin 0.4
// disable the light around model edges, slightly better perf and better looks
r_rimlight 0
// don't do this inefficient high cost lighting job that is barely noticeable
r_lightaverage 0
// dynamic lighting (muzzle flashes, explosions and other lighted effects)
// disabled for increased performance
r_dynamic 0
// reduce maximum dynamic lights that can be active in a frame
// TF2 won't hit this limit often
r_maxdlights 9
// don't render insignificant world lighting
r_worldlightmin 0.0008
// max lights applied to a vertex. 2 is a boost from the default 4
// and isn't a noticeable drop in quality
// you can set this to 0 to disable world lighting for maximum performance
r_worldlights 2
// don't try pixelvis, which is used for halos and pretty lights
r_dopixelvisibility 0
// don't use pixelvis in rendering
r_drawpixelvisibility 0
// don't use a costly precise pixelvis algorithm
r_pixelvisibility_partial 0
// allocate light maps in the hunk
// should be fine, unless you use really big lightmaps
r_hunkalloclightmaps 1
// a light cache, this probably isn't working and will just waste memory
r_lightcache_zbuffercache 0

// --- Shadows ---
// disable shadows, big performance hit if you enable
r_shadows 0
// render shadows using two materials for each texture
// makes shadows look better but uses a lot of memory
r_shadowrendertotexture 0
// don't do a second shadow render pass for sharper shadows
cl_blobbyshadows 1
// threaded shadow manager
r_threaded_client_shadow_manager 1
// the resolution of the shadow depth texture
// this makes shadows more sharp and detailed the higher it is
// shadows are fine at 32 or 64 though
// this only works if depth texturing is enabled
r_flashlightdepthres 32
// depth texturing for shadows: these shadow calcuations are done mostly
// on the CPU and have a big performance hit
r_flashlightdepthtexture 0
// disable shading/lighting useless performance hit
r_flashlightmodels 0
r_flashlightrender 0
r_flashlightdrawfrustum 0
 // don't render shadows far away (nextbot system)
nb_shadow_dist 300
// don't render more shadows than needed
r_shadowmaxrendered 17

// -- Bloom --
// Tints for bloom (0 to 1)
// red tint for bloom
r_bloomtintr 0.3
// green tint for bloom
r_bloomtintg 0.59
// blue tint for bloom
r_bloomtintb 0.11
// the coefficient for bloom effect
r_bloomtintexponent 2.2

// -- Effects --
// disable shell ejection from pistols, shotgun and minigun
cl_ejectbrass 0
// for temporary entity fast collisions, check every 20 frames
cl_fasttempentcollision 20
// disable muzzle flash lights
muzzleflash_light 0
// disable muzzle flashes in first person
cl_muzzleflash_dlight_1st 0
// add extra fluff to bullet lines
// low performance impact, disable for max performance
tracer_extra 1
// don't draw bullet tracers when you're in first person
// low performance impact, disable for maximum performance
r_drawtracers_firstperson 1
// disable water splashes
cl_show_splashes 0
// don't do the costly "xray" outline, used for intel, payload and spawn xray
//glow_outline_effect_enable 0

// -- Particles --
// do particles on a separate thread
r_threaded_particles 1
// batch particles
cl_particle_batch_mode 2
// slight speed up of unused particle performance stats
r_particle_sim_spike_threshold_ms 0
// reduce number of particles, but it only helps a little bit because
// the real performance impact comes from creating particle systems
mat_reduceparticles 1
// use the new particle system for creating new particles
cl_new_impact_effects 1
// don't create particle systems when things hit surfaces, perf and distracting
r_drawflecks 0

// -- Water --
// the distance at which fully cheap water starts
// water does not reflect or refract entities, nor can you see through it
// set to 0.1 for max performance
r_cheapwaterend 1000
// the distance at which transitionary cheap water starts
// water is less reflective after this distance
// set to 0 for max performance
r_cheapwaterstart 400
// water reflections disabled for more performance
r_WaterDrawReflection 0
// disable refraction. makes water really hard to look at
// so only do this on potatos
//r_WaterDrawRefraction 0
// don't force expensive water
r_waterforceexpensive 0
// don't force water reflections for entities
// performance loss, so enable it if you have enough FPS
r_waterforcereflectentities 0
// draw half of the leaf for water to optimize culls
r_ForceWaterLeaf 1

// --- Characters ---
// disable expression optimization (server side only)
// expression optimization runs an additional check
// for only background scenes to ensure a flex animation
// is in the player's view cone, but it only does this extra
// check if the frametime is less than ai_expression_frametime
// so we can disable all expressions in a background scene by
// setting ai_expression_frametime to 0, and avoid the additional
// check that ai_expression_optimization 1 enables
ai_expression_optimization 1
ai_expression_frametime 0
// the maximum frametime before AI is made more efficient
// it isn't exactly TF2 related, but it can help with Source games/mods
// with AI, and the default value is 50, so the more efficient AI
// has probably never seen use (it would activate if one frame took 50 secs to render)
// in this config, it is set to 1/66 (which is our ideal frametime)
ai_frametime_limit 0.0152
// disable 3-way animation blending
anim_3wayblend 0
// duration of an eye blink (do not set to 0, or else TF2 will divide by 0)
blink_duration 0.0304
// enable or disable facial animations
// requires more bones to be setup on the CPU
// but a lot of the personality of TF2 comes from character expression
// so disable this if you want the performance boost
r_flex 1
flex_rules 1
// don't smooth facial animations
flex_smooth 0
// control if character eyes should move
// really doesn't affect performance
r_eyemove 1
tf_clientsideeye_lookats 1
// draw characters' eyes, is a performance hit
r_eyes 1
// shift eye position. no performance impact
//r_eyeshift_x 0
//r_eyeshift_y 0
//r_eyeshift_z 0
// control eye pupil size
//r_eyesize 0
// offload eye glinting to the CPU, using the same method as in DX8
// if you have a slow GPU, enable this
r_glint_procedural 0
// render teeth, small performance boost if disabled
r_teeth 1
// do not set up all bones
cl_SetupAllBones 0

// -- Ropes --
// comment these out for Mannpower
// don't simulate ropes
r_ropetranslucent 0
// don't render solid part
rope_rendersolid 0
// skip drawing non solid part of ropes
rope_solid_minalpha 0
rope_solid_minwidth 0
// extra optimizations for visible ropes,
// don't comment them for Mannpower
// don't do smoothing on ropes
// skips a long smoothing operation in rope node loop
rope_smooth 0
// disable rope subdivisions
// skips lots of heavy loops
rope_subdiv 0
// don't apply wind to ropes
rope_wind_dist 0
// don't take an extra max intensity average for ropes
rope_averagelight 1
// Sets the colors for festive ropes during Smissmas
// 0 to 3 is the lightbulb position in the cycle
//r_ropes_holiday_light_color [0 to 3] Red Green Blue

// --- Gibs --
// disable burning gibs. this is a big performance hit
cl_burninggibs 0
// keep this enabled. if disabled, it will use silly gibs, which are worse for FPS
violence_hgibs 1
// blood. disable for a little performance boost
violence_hblood 1

// -- Props
// draw detail props, like grass
// set to 0 to disable, 1 to enable, or 2 to draw using wireframes
r_drawdetailprops 0
// draw detail props up to this distance
cl_detaildist 1000
// disable clientside physics props
cl_phys_props_enable 0
// draw clientside props up to this distance
r_propsmaxdist 1000
// fade in detail props across this distance, 0 to disable fading
cl_detailfade 0
// limit the count of clientside physics props to a sane limit for TF2
cl_phys_props_max 20
// do not spawn props until we can see them
cl_phys_props_respawndist 1000
// delay in seconds before the client will respawn applicable props
cl_phys_props_respawnrate 120
// don't break props into smaller pieces
func_break_max_pieces 0
// the LOD on static props
// -1 automatic; 0 - high; 1 - medium; 2 - low; 3 - very low
r_staticprop_lod 3
// use static lighting on props
// disabling this decreases performance by
// requiring additional lighting calculations
r_PhysPropStaticLighting 1

// --- Misc ---
// don't draw monitors
cl_drawmonitors 0
// disable jigglebones if we are under the optimal framerate
// set to 0 to disable jigglebones always
cl_jiggle_bone_framerate_cutoff 67

// --- Decals ---
// maximum decals in a map
// lower to 0 for max performance
// 9 or 18 is a good value if you want to see spread
// and get a minor boost performance
r_decals 18
mp_decals 18
// batching decals places them together on one mesh
// this saves memory, but is more taxing on the CPU.
// when the max decal count is so low anyway, the memory
// savings are not worth it
r_drawbatchdecals 0
// freshen up the walls by clearing sprays every round
r_spray_lifetime 1
// disable player sprays, not a big performance boost
//cl_playerspraydisable 1
// if decals are almost fully covered by this many decals, remove them
r_decal_cover_count 2
// if decals are smaller than this on screen in pixels, don't render them
r_decal_cullsize 20
// if decals are covered by other decals this much or more, remove them
r_decal_overlap_area 0.5
// all the other decal rules are fine. don't do this heavy impact check.
r_decal_overlap_count 0
// don't use ambient lighting for props,
// it's heavy and does pratically nothing
r_decalstaticprops 0
// blood decals on bodies, hurts performance
// because new objects need to be created to apply the decals on
r_drawmodeldecals 0
// optimized model decal count if you happen to enable it
r_maxmodeldecal 10
// fading overlays causes performance issues
// maps can already have their own fading rules
r_overlayfadeenable 0
// optimize overlay fades if you happen to enable it
r_overlayfademax 1000
// optimize overlay fades if you happen to enable it
r_overlayfademin 745
// render overlays, pretty minor impact
// disable it for max performance
r_renderoverlayfragment 1

// --- Console ---
// console transparency
con_nprint_bgalpha 255
// console border, disable on potatos
con_nprint_bgborder 1

// --- Ragdolls ---
// disable ragdoll collisions
cl_ragdoll_collide 0
// duration of the fade out effect of ragdolls, 0 instantly removes
cl_ragdoll_fade_time 5
// start fading ragdolls without delay, even if the player is looking at them
// set to 0 for ragdolls
cl_ragdoll_forcefade 1
// disable ragdoll physics
// huge performance hit
// set to 1 for ragdolls
cl_ragdoll_physics_enable 0
// how fast a ragdoll fades out
// the higher the value, the faster it fades out per frame
g_ragdoll_fadespeed 10000
// how fast a ragdoll fades out in low violence mode
g_ragdoll_lvfadespeed 10000
// ragdolls are irrelevant once they've settled
ragdoll_sleepaftertime 1

// --- HUD ---
// -- Crosshair --
// crosshair translucency (0 to 255)
cl_crosshairalpha 255
// crosshair red (0 to 255)
//cl_crosshair_red 0
// crosshair green (0 to 255)
//cl_crosshair_green 0
// crosshair blue (0 to 255)
//cl_crosshair_blue 0
// size of crosshair
//cl_crosshair_scale 0.5
// -- Other display elements --
// adjust the translucency of the killstreak banner, 255 for solid
cl_hud_killstreak_display_alpha 255
// set how long the killstreak banner stays, 0 to disable banner
cl_hud_killstreak_display_time 4
// minimize clutter in HUD
//cl_hud_minmode 1
// disable live player model in HUD
cl_hud_playerclass_use_playermodel 0
// achievements tracked at once
hud_achievement_tracker 2
// time kill record stays on screen
hud_deathnotice_time 4
// targeting recticle transparency
hud_reticle_minalpha 255
// show useful information when you're fighting robots
cl_mvm_wave_status_visible_during_wave 1
// don't crowd up my game with notifications!
cl_notifications_max_num_visible 1
// make notifications leave faster
cl_notifications_move_time 0.1
// keep the vote UI up after voting
//cl_vote_ui_active_after_voting 1
// show vote UI notifications
//cl_vote_ui_show_notification 1
// glow achievements for a little while shorter
hud_achievement_glowtime 1
// -- Chat --
// fade chat a bit faster
hud_saytext_time 8
// disable chat from printing on screen
//cl_showtextmsg 0
// chat filter - enable parts of chat:
// join/leave (1), name change (2), talking (4), server messages (8), team change (16), unknown (32)
// add a combination of these numbers together to enable that combination
// (name change + team change = 18)
// 0 for everything disabled
//cl_chatfilters 63
// mute a player's text and voice (1), rather than just voice (0)
//cl_mute_all_comms 1
// values:
// 0 - PC buckets
// select weapons from the side of your screen, fire to confirm
// 1 - PC fast switch
// fast switch for PC buckets (no fire to confirm)
// 2 - Xbox buckets / plus
// fast switch
// weapon selection window comes up at the middle of your screen
// can select weapons without ammo (but not switch to them)
// 3 - Xbox carousel scroll:
// fast switch
// slot 1 = last weapon, slot 2 = next weapon,
// slot 3 = swap weapon, slot 4 = previous weapon
//hud_fastswitch 1
// autoreload
//hud_autoreloadscript 1
// don't draw HUD capture panel
//hud_capturepanel 0
// disable HTML MOTDs (ads, music player, fancy server intros)
//cl_disablehtmlmotd 1
// don't commit suicide on class change
//hud_classautokill 0
// -- Information panels --
// fps meter, 1 = show, 2 = smooth
//cl_showfps 2
// current position
//cl_showpos 1
// battery meter
//cl_showbattery 1
// show blocking disk operations on fps panel
//cl_showblocking 1

// --- Bug Reporter ---
// upload bug reporter attachments asynchronously
bugreporter_uploadasync 1

// --- Memory ---
// size of the data cache, used for some values
//datacachesize 512
// keep the LZMA compression system in memory so it doesn't have to be
// started every time
lzma_persistent_buffer 1
// minimum memory used by heap
mem_min_heapsize 192
// maximum memory used by heap
//mem_max_heapsize 768
// free up some memory
mem_compact

// --- Filesystem ---
// keep files up to 128KB away in buffer
filesystem_buffer_size 131072
// maximum number of file reads
// increase to 64 if you have an SSD
filesystem_max_stdio_read 32
// use native filesystem calls
filesystem_native 1
// do not use unbuffered IO
filesystem_unbuffered_io 0
// disable loading game data async (set to 1 for SSDs)
mod_load_anims_async 0
mod_load_mesh_async 0
mod_load_vcollide_async 0
// on SSDs we're loading async, we don't need to load everything at once
// so set them to 0 if you're using an SSD
mod_forcedata 1
mod_forcetouchdata 1
mod_touchalldata 1

// --- Sound ---
// optimization for potatos: disable volume scaling
//dsp_db_mixdrop 1
//dsp_db_min 0
//dsp_mix_min 0
//dsp_mix_max 0
// disable spatial
dsp_enhance_stereo 0
// disable room FX mixers
dsp_slow_cpu 1
// disable auto dsp
dsp_room 0
// improve sounds that the player is facing away from
// if you need to maximize performance, set this to 0
dsp_facingaway 30
// DSP for the Announcer
// use 0 to disable DSP effects for the Announcer
//dsp_speaker 0
// DSP for positional audio
// use 0 to disable DSP effects for this
//dsp_spatial 0
// DSP for water muffling effect
// use 0 to disable this effect
// 14 to enable
//dsp_water 0
// play sounds independently of main engine work
snd_async_fullyasync 1
// wait until 64K of audio file has been loaded
snd_async_minsize 65536
// have the sound mixer run asynchronously
snd_mix_async 1
// keep sounds for 80 millis and mix them
snd_mixahead 0.08
// an extra delay on sounds
// it helps if your sounds are desynced, which normally happens if your CPU
// is too slow to keep pace with the sound system
// so increase this value to 0.1 if needed
// then adjust phonemedelay accordingly
snd_delay_sound_shift 0.01
// a lot of extra work goes into finding duplicates
snd_cull_duplicates 0
// skips spatiazation traces until the next frame
snd_defer_trace 1
// enable interpolated mixers, which is slightly slower than linear.
// for increase in sound quality, it's worth it to keep this setting
// enable except if you absolutely need maximize performance
snd_pitchquality 1
// spatialize sound every 8 frames (2 ^ 3)
snd_spatialize_roundrobin 3
// disables lowering volume of less important sounds when one with priority plays
// performance benefit, but you can turn off disabling ducking if you want the
// better mixing effects
snd_disable_mixer_duck 1
// don't update sounds twice
snd_noextraupdate 1
// don't delay phonemes with an async sound system
phonemedelay 0
// don't box filter phonemes
phonemefilter 0.01
// don't crossfade a second phoneme on any LODs
phonemesnap 0
// buffer voice stream for better quality, at a slight delay
voice_buffer_ms 200
// decreases other sounds by 20% when voice comms are played
//voice_overdrive 1.25
// fade time for other sounds when voice comms start playing
//voice_overdrivefadetime 0.25
// reuse unimportant sound channels, increases perf and quality
voice_steal 2
// disable voice (uncomment both)
//voice_modenable 0 // tells server to not send voice data
//voice_enable 0 // disables voice system client side
// record voice to file
//voice_recordtofile record.wav
// play voice from file
//voice_inputfromfile voice.wav
// increase your voice volume
//voice_scale 1
// force using your mic, if your mic doesn't work, might be worth looking into
//voice_forcemicrecord 1

// --- Input ---
// determine key time from a smoothed frametime
// this does not delay your keyboard input
in_usekeyboardsampletime 1
// -- Mouse --
// disable Windows mouse acceleration
//m_mousespeed 0
// use raw input from mouse
// test to see if just using m_mousespeed 0 is ok
//m_rawinput 1
// don't average mouse input over 2 frames
//m_filter 0
// mouse sensitivity
//sensitivity 3
// sensitivity multiplier when zoomed in.
// 1 is default, but on higher FOVs, it makes it more sensitive than unzoomed
//zoom_sensitivity_ratio 0.818933027098955175
// mouse yaw sensitivity
//cl_yawspeed 210
// mouse pitch sensitivity
//cl_pitchspeed 225
// mouse yaw factor, mostly for acceleration
// if you want to change yaw sens, use cl_yawspeed
//m_yaw 0.022
// custom mouse acceleration
// 0 - no custom acceleration
// 1 - mouse acceleration = min(m_customaccel_max, pow(raw_mouse_delta, m_customaccel_exponent) * m_customaccel_scale + sensitivity)
// 2 - Same as 1, with but x and y sensitivity are scaled by m_pitch and m_yaw respectively.
// 3 - mouse accelartion = pow(raw_mouse_delta, m_customaccel_exponent - 1) * sensitivity
//m_customaccel 0
//m_customaccel_scale 0.04
//m_customaccel_max 0
//m_customaccel_exponent 1
// moves the player at a faster rate when changing elevation on a slope
// (only in local self predictions)
cl_idealpitchscale 1.3

// --- Backpack ---
// alphabetically sort loadout options
//tf_item_selection_panel_sort_type 1
// decrease button delay for moving items
tf_backpack_page_button_delay 0.25
// time spent per frame for loading item panels
tf_time_loading_item_panels 0.0001

// --- OpenGL ---
// Optimizations that only affect Linux and Mac
// allows for page flipping, which skips a two step render process
//gl_can_resolve_flipped 1
// enable fast queries (just in case GL manager autodetect fails)
gl_can_query_fast 1
// batch texture creation and removal to reduce calls
gl_batch_tex_creates 1
gl_batch_tex_destroys 1
// minimize textures
gl_minimize_rt_tex 1
// flushes TOF, which makes the game smoother, at the cost of a bit of performance
// if you're showing off how many frames this config can pump out, disable it
// but this seriously makes the game feel like it's running faster
gl_mtglflush_at_tof 1
// disable debug messages
gl_debug_output 0
// disable outdated workaround
gl_radar7954721_workaround_mixed 0
// use fastest resolve mode when up scaling too
gl_magnify_resolve_mode 1
// increase shader pair cache size
gl_paircache_rows_lg2 15
gl_paircache_ways_lg2 10

echo "mastercomfig v3.4.0 loaded."

// use maxframes preset
//exec maxframes
// load your own config called extra.cfg
//exec extra
